" Style Guidelines
set expandtab
set shiftwidth=2
set tabstop=2
set softtabstop=2
autocmd BufNewFile,BufRead {*.m,*.mi,*.mhtml} setlocal filetype=mason
autocmd BufNewFile,BufRead {*.kata} setlocal filetype=kata
autocmd FileType {mail,markdown,taskedit,text} setlocal spell
autocmd FileType {mail} setlocal formatoptions+=aw textwidth=150
autocmd FileType {crontab} setlocal nobackup | set nowritebackup
autocmd FileType {java,jsp} setlocal shiftwidth=4 tabstop=4 textwidth=150 cc=+1

" Lua configuration
lua << EOF

-- Set gruvbox colorscheme
vim.opt.termguicolors = true
vim.o.background = "dark"
vim.cmd([[colorscheme gruvbox]])

-- Leader
vim.g.mapleader = " " -- In lua we just use a space, not <space>

-- Smart searching
vim.opt.ignorecase = true
vim.opt.smartcase = true
vim.opt.hlsearch = true

-- Cursor line
vim.opt.cursorline = true
vim.opt.relativenumber = true
vim.opt.number = true

-- Zen-mode
vim.api.nvim_set_keymap('n', '<Leader>gy', '<cmd>ZenMode<CR>', { noremap = true, silent = true })

-- Lists.vim
vim.g.lists_filetypes = { 'md' }

-- Wiki.vim
vim.g.wiki_root = '~/Vimwiki'
vim.g.wiki_filetypes = { 'md' }
vim.g.wiki_link_extension = '.md'
vim.g.wiki_link_target_type = 'md'
vim.g.wiki_journal = { index_use_journal_scheme = false }

-- Startify
vim.g.startify_bookmarks = {
  '/Users/mwarner/Dotfiles/flake.nix',
  '/Users/mwarner/Dotfiles/nix/.config/nixpkgs/neovim/neovim.nix',
  '/Users/mwarner/Dotfiles/nix/.config/nixpkgs/neovim/vimrc',
  '/Users/mwarner/Dotfiles/nix/.config/nixpkgs/shell/shell.nix',
  '/Users/mwarner/Dotfiles/nix/.config/nixpkgs/shell/zshrc',
  '/Users/mwarner/Dotfiles/nix/.config/nixpkgs/alacritty/alacritty.nix',
}

vim.g.startify_skiplists = {
  '/Users/mwarner/Downloads',
}

-- Telescope
require('telescope').load_extension('fzf')
vim.api.nvim_set_keymap('n', '<c-p>', '<cmd>Telescope find_files<cr>', { noremap = true, silent = true })
vim.api.nvim_set_keymap('n', '<leader>ff', '<cmd>Telescope find_files<cr>', { noremap = true, silent = true })
vim.api.nvim_set_keymap('n', '<leader>fg', '<cmd>Telescope live_grep<cr>', { noremap = true, silent = true })

-- Lualine
require('lualine').setup()

-- Treesitter
require'nvim-treesitter.configs'.setup {
  ensure_installed = "maintained",
  highlight = {
    enable = true,
  },
}

-- Nvim Completion(Cmp) setup
vim.opt.completeopt = { 'menu' , 'menuone' , 'noselect' }

local cmp = require'cmp'

cmp.setup({
  snippet = {
    expand = function(args)
    vim.fn["vsnip#anonymous"](args.body) -- For `vsnip` user.
  end
  },
  mapping = {
    ['<C-p>'] = cmp.mapping.select_prev_item(),
    ['<C-n>'] = cmp.mapping.select_next_item(),
    ['<C-d>'] = cmp.mapping.scroll_docs(-4),
    ['<C-f>'] = cmp.mapping.scroll_docs(4),
    ['<C-Space>'] = cmp.mapping.complete(),
    ['<C-e>'] = cmp.mapping.close(),
    ['<CR>'] = cmp.mapping.confirm(),
  },
  sources = {
    { name = 'nvim_lsp' },
    { name = 'vsnip' },
    { name = 'buffer' },
    { name = 'nvim_lua' },
    { name = 'path' },
    { name = 'spell' },
  }
})

-- LSP Configurations
-- Use an on_attach function to only map the following keys 
-- after the language server attaches to the current buffer
local on_attach = function(client, bufnr)
  local function buf_set_keymap(...) vim.api.nvim_buf_set_keymap(bufnr, ...) end
  local function buf_set_option(...) vim.api.nvim_buf_set_option(bufnr, ...) end

  --Enable completion triggered by <c-x><c-o>
  buf_set_option('omnifunc', 'v:lua.vim.lsp.omnifunc')

  -- Mappings.
  local opts = { noremap=true, silent=true }

  -- See `:help vim.lsp.*` for documentation on any of the below functions
  buf_set_keymap('n', 'gD', '<Cmd>lua vim.lsp.buf.declaration()<CR>', opts)
  buf_set_keymap('n', 'gd', '<Cmd>lua vim.lsp.buf.definition()<CR>', opts)
  buf_set_keymap('n', 'K', '<Cmd>lua vim.lsp.buf.hover()<CR>', opts)
  buf_set_keymap('n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<CR>', opts)
  buf_set_keymap('n', '<C-k>', '<cmd>lua vim.lsp.buf.signature_help()<CR>', opts)
  buf_set_keymap('n', '<space>D', '<cmd>lua vim.lsp.buf.type_definition()<CR>', opts)
  buf_set_keymap('n', '<space>rn', '<cmd>lua vim.lsp.buf.rename()<CR>', opts)
  buf_set_keymap('n', '<space>ca', '<cmd>lua vim.lsp.buf.code_action()<CR>', opts)
  buf_set_keymap('n', '<space>qf', '<cmd>lua vim.lsp.buf.code_action()<CR>', opts)
  buf_set_keymap('n', 'gr', '<cmd>lua vim.lsp.buf.references()<CR>', opts)
  buf_set_keymap('n', '<space>e', '<cmd>lua vim.diagnostic.show_line_diagnostics()<CR>', opts)
  buf_set_keymap('n', '[g', '<cmd>lua vim.diagnostic.goto_prev()<CR>', opts)
  buf_set_keymap('n', ']g', '<cmd>lua vim.diagnostic.goto_next()<CR>', opts)
  buf_set_keymap('n', '<space>q', '<cmd>lua vim.diagnostic.set_loclist()<CR>', opts)
  buf_set_keymap("n", "<space>f", "<cmd>lua vim.lsp.buf.formatting()<CR>", opts)

end

local nvim_lsp = require('lspconfig')

--[[
-- Custom lang server
local nvim_lsp_config = require('lspconfig/configs')
local nvim_lsp_util = require('lspconfig/util')
nvim_lsp_config.kata = {
  default_config = {
    cmd = { "kata", "lang-server" },
    filetypes = { "kata" },
    root_dir = nvim_lsp_util.root_pattern("kata.json", ".git")
  }
}
]]--

-- Use a loop to conveniently call 'setup' on multiple servers and
-- map buffer local keybindings when the language server attaches
local servers = {
  --"kata",
  "tsserver",
}


for _, lsp in ipairs(servers) do
  nvim_lsp[lsp].setup {
    capabilities = require('cmp_nvim_lsp').update_capabilities(vim.lsp.protocol.make_client_capabilities());
    on_attach = on_attach
  }
end

EOF
